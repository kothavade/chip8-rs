const FONT: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub struct Memory {
    // 4k memory: 0x000 - 0xFFF
    // 0x000 - 0x1FF: Original Chip-8 interpreter
    // 0x050 - 0x0A0: Font set
    // 0x200 - 0xFFF: Program ROM and work RAM
    mem: [u8; 4096],

    // Stack
    // Stores 16 16-bit values, only need 1-2 values
    stack: [u16; 16],
}

impl Default for Memory {
    fn default() -> Self {
        let mut mem = [0; 4096];
        // Font is copied into 0x050 to 0x09F
        mem[0x050..0x0A0].copy_from_slice(&FONT);
        Self {
            mem,
            stack: [0; 16],
        }
    }
}

impl Memory {
    pub fn load_rom(&mut self, rom: &[u8]) {
        // Load ROM into memory starting at 0x200
        self.mem[0x200..(0x200 + rom.len())].copy_from_slice(rom);
    }
}
